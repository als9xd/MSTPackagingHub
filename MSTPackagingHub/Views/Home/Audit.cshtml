
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md">
        <table class="table table-striped table-bordered dt-responsive nowrap" id="scripts-table" style="width:100%;"></table>
    </div>
</div>
@section scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js"></script>
    <script src="~/Scripts/highlight.pack.js"></script>
    <script src="//cdn.datatables.net/plug-ins/1.10.12/sorting/datetime-moment.js"></script>
    <script>
        let converter = new showdown.Converter();
        $(document).ready(function () {
            $.fn.dataTable.moment('dddd, MMMM Do, YYYY');
            $('#scripts-table').DataTable({
                "responsive": true,
                "autoWidth":false, 
                "columnDefs": [
                    {
                        "title": "PackageID",
                        "targets": [0],
                    },
                    {
                        "title": "Environment",
                        "targets": [1],
                    },
                    {
                        "title": "OS",
                        "targets": [2],
                        "render": function (data, type, row) {
                            let url = new URL(location.href);
                            url.searchParams.set('os', data);
                            return "<a href=" + url + ">"+data + "</a>";
                        }
                    },
                    {
                        "title": "Authors",
                        "targets": [3],
                        "render": function (data, type, row) {
                            let authors_split = data.split(',');
                            let authors_html = "";
                            if (authors_split.length === 1 && authors_split[0] === "") {
                                return authors_html;
                            }
                            for (let i = 0; i < authors_split.length; i++) {
                                authors_split[i] = authors_split[i].trim();
                                if (authors_split[i] !== "") {
                                    let url = new URL(location.href);
                                    url.searchParams.set('author', authors_split[i]);
                                    authors_html += "<li><a href='" + url + "'>" + authors_split[i] + "</a></li>";
                                }
                            }
                            return "<ul>" + authors_html + "</ul>";
                        }
                    },
                    {
                        "title": "File Name",
                        "targets": [4],
                    },
                    {
                        "title": "Created",
                        "render": function (data, type, row) {
                            return moment(data).format('dddd, MMMM Do, YYYY');
                        },
                        "targets": [5]
                    },
                    {
                        "title": "Last Modified",
                        "render": function (data, type, row) {
                            return moment(data).format('dddd, MMMM Do, YYYY');
                        },
                        "targets": [6]
                    },
                    {
                        "title": "Path",
                        "targets": [7]
                    },
                    {
                        "title": "Readme",
                        "className": "readme-text",
                        "render": function (data, type, row) {
                            let readmes = JSON.parse(unescape(data));
                            return "<pre><code class='markdown hljs'>" + readmes.join("<hr>") + "</code></pre>";
                        },
                        "targets": [8],
                    },
                    {
                        "title": "Contents",
                        "render": function (data, type, row) {
                            return "<pre><code class='perl hljs'>" + data + "</code></pre>";
                        },
                        "targets": [9],
                    },
                ],
                "language":
                    {
                        "processing": "<div class='overlay custom-loader-background'><i class='fa fa-cog fa-spin custom-loader-color'></i></div>"
                    },
                "ajax":
                    {
                        "url": "/api/Packages?" + (new URL(location)).searchParams,
                        "type": "GET",
                        "dataType": "JSON",
                        "dataSrc": function (xmldata) {
                            return xmldata;
                        }
                    },
                "columns": [
                    {
                        "data": "PackageID"
                    },
                    {
                        "data": "Environment"
                    },
                    {
                        "data": "OSVer"
                    },
                    {
                        "data": "Authors"
                    },
                    {
                        "data": "FileName"
                    },
                    {
                        "data": "CreationTime"
                    },
                    {
                        "data": "LastWriteTime"
                    },
                    {
                        "data": "Path"
                    },
                    {
                        "data": "Info"
                    },
                    {
                        "data": "Text"
                    }

                ]
            }).on('responsive-display', function (e, datatable, row, showHide, update) {
                if (typeof row.selector.rows[0] !== 'undefined') {
                    $(row.selector.rows[0].nextSibling).find('li[data-dt-column="8"]').addClass('readme-text');
                    $(row.selector.rows[0].nextSibling).find('pre code').each(function (i, block) {
                        hljs.highlightBlock(block);
                    });
                    datatable.responsive.recalc();
                }
            }).on('responsive-resize', function (e, datatable, columns) {
                $(columns).find('li[data-dt-column="8"]').addClass('readme-text');
                $(columns).find('pre code').each(function (i, block) {
                    hljs.highlightBlock(block);
                });
                datatable.responsive.recalc();
                });
            $("thead tr").css("border-bottom", "5px solid #000");

        });
    </script>
}